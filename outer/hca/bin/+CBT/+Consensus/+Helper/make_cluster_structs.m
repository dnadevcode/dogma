function [clusterKeys, clusterConsensusDataStructs] = make_cluster_structs(consensusStruct)
    clusterKeys = consensusStruct.clusterKeys;
    
    numClusterKeys = length(clusterKeys);
    clusterConsensusDataStructs = cell(numClusterKeys, 1);
    import CBT.Consensus.Helper.extract_cluster_deliverables;
    for clusterKeyNum = 1:numClusterKeys
        clusterKey = clusterKeys{clusterKeyNum};
        clusterConsensusData.clusterKey = clusterKey;
        [...
            clusterConsensusData.barcode,...
            clusterConsensusData.bitmask,...
            clusterConsensusData.stdErrOfTheMean,...
            clusterConsensusData.indexWeights,...
            clusterConsensusData.clusterResultStruct,...
            ~...
        ] = extract_cluster_deliverables(consensusStruct, clusterKey);
        clusterConsensusData.details.consensusStruct = consensusStruct;
        clusterConsensusDataStructs{clusterKeyNum} = clusterConsensusData;
    end
end